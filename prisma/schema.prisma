// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  slug String? @db.VarChar(120) @unique
  description String? @db.Text
  flag FLAG @default(ACTIVED)
  
  category_product CategoryProduct[]
  category_service CategoryService[]
  @@map("categories")
}

model CategoryProduct {
  barcode String @db.VarChar(100)
  categoryId Int @db.Int @map("category_id")

  products Product @relation(fields: [barcode], references: [barcode])
  categories Category @relation(fields: [categoryId], references: [id])

  @@id([barcode, categoryId])
  @@map("category_product")
}

model Product {
  barcode String @id @db.VarChar(100) @default(cuid())
  name String @db.VarChar(150)
  slug String? @db.VarChar(200) @unique
  image String? @db.VarChar(255)
  description String? @db.Text
  flag FLAG @default(ACTIVED)
  totalPrice Decimal @db.Decimal(12,2) @default(0) @map("total_price")
  totalCogs Decimal @db.Decimal(12, 2) @default(0) @map("total_cost_of_goods_sold")
  createdAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  updatedAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @map("updated_at")

  product_detail ProductComponent[]
  product_category CategoryProduct[]
  service_product ServiceProduct[]
  @@index(map: "idx_name_barcode", fields: [name, barcode])
  @@fulltext(map: "idx_name_description", fields: [name, description])
  @@map("products")
}

model ServiceProduct {
  barcodeService String @db.VarChar(100) @map("barcode_service")
  barcodeProduct String @db.VarChar(100) @map("barcode_product")

  products Product @relation(fields: [barcodeProduct], references: [barcode])
  services Service @relation(fields: [barcodeService], references: [barcode])
  @@id([barcodeProduct, barcodeService])
  @@map("service_products")
}

model CategoryService {
  barcode String @db.VarChar(100)
  categoryId Int @db.Int


  categories Category @relation(fields: [categoryId], references: [id])
  services Service @relation(fields: [barcode], references: [barcode])
  @@id([barcode, categoryId])
  @@map("category_service")
}

model Service {
  barcode String @id @default(cuid())
  name String @db.VarChar(100)
  slug String @db.VarChar(100)
  flag String @db.VarChar(100)

  service_product ServiceProduct[]
  category_service CategoryService[]

@@map("services")
}


model ProductComponent {
  barcode String
  componentId String @db.VarChar(255) @map("component_id")
  minQty Int @db.Int @default(1) @map("min_quantity")

  products Product @relation(fields: [barcode], references: [barcode])
  component Component @relation(fields: [componentId], references: [id])

  @@id([barcode, componentId])
  @@map("product_component")
}

model Component {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  price Decimal? @db.Decimal(12,2) 
  cogs Decimal? @db.Decimal(12,2) @map("cost_of_goods_sold")
  flag FLAG @default(ACTIVED)
  typeComponent TYPECOMPONENT? @map("type_component")
  description String? @db.Text
  canIncrise Boolean? @default(false)
  createdAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  updatedAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"))

  ProductComponent ProductComponent[]
  qualities Quality[]
  @@map("components")
}

model Quality {
  id Int @id @default(autoincrement())
  componentId String @db.VarChar(255)
  name String @db.VarChar(100)
  orientation Boolean @default(false)
  description String? @db.Text
  flag FLAG @default(ACTIVED)

  component Component @relation(fields: [componentId], references: [id])
  sizes Size[]
  @@map("qualities")
}

model Size {
  id Int @id @default(autoincrement())
  qualityId Int @db.Int
  lenght Float? @db.Double
  width Float? @db.Double
  height Float? @db.Double
  weight Float? @db.Float
  price Decimal? @db.Decimal(12,2) 
  cogs Decimal? @db.Decimal(12,2) @map("cost_of_goods_sold")

  quality Quality @relation(fields: [qualityId], references: [id])
  @@map("sizes")
}


enum FLAG {
  ACTIVED
  FAVOURITE
  DISABLED
  DELETED
}

enum TYPECOMPONENT {
  MATERIAL
  ADDON
  FINISHING
  PROCESSING
  CONSUMING
}

enum CATEGORY {
  PRODUCT
  SERVICE
}
