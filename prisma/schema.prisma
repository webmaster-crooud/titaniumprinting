
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  slug String? @db.VarChar(120) @unique
  description String? @db.Text
  flag FLAG @default(ACTIVED)
  
  category_product CategoryProduct[]
  category_service CategoryService[]
  @@map("categories")
}

model CategoryProduct {
  barcode String @db.VarChar(100)
  categoryId Int @db.Int @map("category_id")

  products Product @relation(fields: [barcode], references: [barcode])
  categories Category @relation(fields: [categoryId], references: [id])

  @@id([barcode, categoryId])
  @@map("category_product")
}

model Product {
  barcode String @id @db.VarChar(100) @default(cuid())
  name String @db.VarChar(150)
  slug String? @db.VarChar(200) @unique
  cover String? @db.VarChar(255)
  description String? @db.Text
  flag FLAG @default(ACTIVED)
  totalPrice Decimal @db.Decimal(12,2) @default(0) @map("total_price")
  totalCogs Decimal @db.Decimal(12, 2) @default(0) @map("total_cost_of_goods_sold")
  createdAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  updatedAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @map("updated_at")

  product_component ProductComponent[]
  product_category CategoryProduct[]
  service_product ServiceProduct[]
  images Image[]
  @@index(map: "idx_name_barcode", fields: [name, barcode])
  @@fulltext(map: "idx_name_description", fields: [name, description])
  @@map("products")
}

model Image {
  id Int @db.Int @default(autoincrement()) @id
  barcode String @db.VarChar(100) 
  name String @db.VarChar(100)
  source String @db.VarChar(100)

  product Product @relation(fields: [barcode], references: [barcode])
  @@map("images")
}

model ServiceProduct {
  barcodeService String @db.VarChar(100) @map("barcode_service")
  barcodeProduct String @db.VarChar(100) @map("barcode_product")

  products Product @relation(fields: [barcodeProduct], references: [barcode])
  services Service @relation(fields: [barcodeService], references: [barcode])
  @@id([barcodeProduct, barcodeService])
  @@map("service_product")
}

model CategoryService {
  barcode String @db.VarChar(100)
  categoryId Int @db.Int @map("category_id")


  categories Category @relation(fields: [categoryId], references: [id])
  services Service @relation(fields: [barcode], references: [barcode])
  @@id([barcode, categoryId])
  @@map("category_service")
}

model Service {
  barcode String @id @default(cuid())
  name String @db.VarChar(100)
  slug String @db.VarChar(100)
  flag FLAG @default(ACTIVED)

  service_product ServiceProduct[]
  category_service CategoryService[]

  @@map("services")
}

model ProductComponent {
  barcode String
  componentId String @db.VarChar(255) @map("component_id")
  minQty Int @db.Int @default(1) @map("min_quantity")
  typePieces String? @db.VarChar(50) @map("type_pieces")

  products Product @relation(fields: [barcode], references: [barcode])
  component Component @relation(fields: [componentId], references: [id])

  @@id([barcode, componentId])
  @@map("product_component")
}

model Component {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  price Decimal? @db.Decimal(12,2) 
  cogs Decimal? @db.Decimal(12,2) @map("cost_of_goods_sold")
  flag FLAG @default(ACTIVED)
  typeComponent TYPECOMPONENT? @map("type_component")
  description String? @db.Text
  canIncrise Boolean? @default(false) @map("can_incrise")
  createdAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  updatedAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"))

  ProductComponent ProductComponent[]
  qualities Quality[]
  @@map("components")
}

model Quality {
  id Int @id @default(autoincrement())
  componentId String @db.VarChar(255)
  name String @db.VarChar(100)
  orientation Boolean @default(false)
  description String? @db.Text
  flag FLAG @default(ACTIVED)

  component Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  sizes Size[]
  @@map("qualities")
}

model Size {
  id Int @id @default(autoincrement())
  name String? @db.VarChar(100) 
  qualityId Int @db.Int
  length Float? @db.Double
  width Float? @db.Double
  height Float? @db.Double
  weight Float? @db.Float
  price Decimal? @db.Decimal(12,2) 
  cogs Decimal? @db.Decimal(12,2) @map("cost_of_goods_sold")

  quality Quality @relation(fields: [qualityId], references: [id], onDelete: Cascade)
  @@map("sizes")
}

model Cart {
  transactionCode String @id @default(cuid()) @map("transaction_code")
  files String @db.VarChar(100)
  notes String? @db.VarChar(100)
  totalPriceComponent Int @db.Int @default(0) @map("total_price_component")
  totalPrice Decimal @db.Decimal(12,2) @default(0) @map("total_price")
  totalCogs Decimal @db.Decimal(12,2) @default(0) @map("total_cost_of_goods_sold")
  totalQty Int @db.Int @default(0) @map("total_quantity")
  status STATUS_ORDER @default(PENDING)
  userId String @db.VarChar(100)
  user User @relation(fields: [userId], references: [id])

  delivery Delivery?
  @@map("cart")
}

model Delivery {
  cartId String @id @default(cuid()) @map("cart_id") @unique
  courier String @db.VarChar(100)
  price Decimal @db.Decimal(12,2)
  resi String? @db.VarChar(100)

  cart Cart @relation(fields: [cartId], references: [transactionCode])
}

model User {
  id String @id @default(cuid())
  firstName String @db.VarChar(100) @map("first_name")
  lastName String @db.VarChar(100) @map("last_name")
  phone Int @db.Int @unique
  email String @db.VarChar(100) @unique
  addresses Address[]
  cart Cart[]
  role ROLE @default(MEMBER)
  @@map("users")
}


model Address {
  id Int @id @default(autoincrement())
  userId String @db.VarChar(100)
  name String @db.VarChar(100)
  street String @db.VarChar(100)
  city String @db.VarChar(100)
  province String @db.VarChar(100) 
  country String @db.VarChar(100)
  postalCode Int @db.Int @map("postal_code")
  building String? @db.VarChar(100)

  user User @relation(fields: [userId], references: [id])

  @@map("addresses")
}


enum FLAG {
  ACTIVED
  FAVOURITE
  DISABLED
}

enum TYPECOMPONENT {
  MATERIAL
  ADDON
  FINISHING
  PROCESSING
  CONSUMING
}

enum CATEGORY {
  PRODUCT
  SERVICE
}

enum STATUS_ORDER {
  PENDING
  PAYMENT
  PROCESSING
  DELIVERY
  FINISH
  RETURN
}

enum ROLE {
  DEV
  OWNER
  ADMIN
  MEMBER
}