// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  slug        String? @unique @db.VarChar(120)
  description String? @db.Text
  flag        FLAG    @default(ACTIVED)

  category_product CategoryProduct[]

  @@map("categories")
}

model CategoryProduct {
  barcode    String @db.VarChar(100)
  categoryId Int    @map("category_id") @db.Int

  products   Product  @relation(fields: [barcode], references: [barcode])
  categories Category @relation(fields: [categoryId], references: [id])

  @@id([barcode, categoryId])
  @@map("category_product")
}

model Product {
  barcode     String   @id @default(cuid()) @db.VarChar(100)
  name        String   @db.VarChar(150)
  slug        String?  @unique @db.VarChar(200)
  cover       String?  @db.VarChar(255)
  description String?  @db.Text
  flag        FLAG     @default(ACTIVED)
  createdAt   DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @map("updated_at") @db.Timestamp(0)
  orientation Boolean  @default(false)

  product_component ProductComponent[]
  product_category  CategoryProduct[]
  service_product   ServiceProduct[]
  images            Image[]

  @@index(map: "idx_name_barcode", fields: [name, barcode])
  @@map("products")
}

model Image {
  id      Int    @id @default(autoincrement()) @db.Int
  barcode String @db.VarChar(100)
  name    String @db.VarChar(100)
  source  String @db.VarChar(100)

  product Product @relation(fields: [barcode], references: [barcode])

  @@map("images")
}

model ServiceProduct {
  barcodeService String @map("barcode_service") @db.VarChar(100)
  barcodeProduct String @map("barcode_product") @db.VarChar(100)

  products Product @relation(fields: [barcodeProduct], references: [barcode])
  services Service @relation(fields: [barcodeService], references: [barcode])

  @@id([barcodeProduct, barcodeService])
  @@map("service_product")
}

model Service {
  barcode String @id @default(cuid())
  name    String @db.VarChar(100)
  slug    String @db.VarChar(100)
  flag    FLAG   @default(ACTIVED)

  service_product ServiceProduct[]

  @@map("services")
}

model ProductComponent {
  barcode     String
  componentId Int    @map("component_id") @db.Int
  minQty      Int    @default(1) @map("min_quantity") @db.Int

  products  Product   @relation(fields: [barcode], references: [barcode])
  component Component @relation(fields: [componentId], references: [id])

  @@id([barcode, componentId])
  @@map("product_component")
}

model Component {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(100)
  typeComponent TYPECOMPONENT? @map("type_component")
  flag          FLAG           @default(ACTIVED)
  createdAt     DateTime       @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime       @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  price Decimal?  @db.Decimal(12, 2)
  cogs  Decimal? @map("cost_of_goods_sold") @db.Decimal(12, 2)

  ProductComponent ProductComponent[]
  qualities        Quality[]

  @@map("components")
}

model Quality {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)
  flag FLAG   @default(ACTIVED)
  price Decimal?  @db.Decimal(12, 2)
  cogs  Decimal? @map("cost_of_goods_sold") @db.Decimal(12, 2)

  componentId Int       @map("component_id") @db.Int
  component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  qualitiesSize QualitySize[]
  @@map("qualities")
}

model Size {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(100)
  length    Float  @default(1) @db.Double // cm
  width     Float  @default(1) @db.Double // cm
  height    Float  @default(1) @db.Double // cm
  weight    Float  @default(1) @db.Float // gram
  wide Float  @db.Double

  qualitiesSize QualitySize[]
  @@map("sizes")
}

model QualitySize {
  id Int @id @default(autoincrement())
  qualityId Int?     @map("quality_id") @db.Int
  sizeId Int?  @map("size_id") @db.Int
  price Decimal?  @db.Decimal(12, 2)
  cogs  Decimal? @map("cost_of_goods_sold") @db.Decimal(12, 2)

  sizes  Size? @relation(fields: [sizeId], references: [id])
  qualities Quality? @relation(fields: [qualityId], references: [id])
  @@map("quality_size")
}

model ProgressivePricing {
  id         Int     @id @default(autoincrement()) @db.Int
  entityType String  @map("entity_type")
  entityId   Int     @map("entity_id")
  minQty     Int     @default(1) @map("min_quantity") @db.Int
  maxQty     Int?    @map("max_quantity") @db.Int
  price      Decimal @db.Decimal(12, 2)
  @@map("progressive_pricing")
}

// model Cart {
//   transactionCode     String       @id @default(cuid()) @map("transaction_code")
//   files               String       @db.VarChar(100)
//   notes               String?      @db.VarChar(100)
//   totalPriceComponent Int          @default(0) @map("total_price_component") @db.Int
//   totalPrice          Decimal      @default(0) @map("total_price") @db.Decimal(12, 2)
//   totalCogs           Decimal      @default(0) @map("total_cost_of_goods_sold") @db.Decimal(12, 2)
//   totalQty            Int          @default(0) @map("total_quantity") @db.Int
//   status              STATUS_ORDER @default(PENDING)
//   userId              String       @db.VarChar(100)
//   user                User         @relation(fields: [userId], references: [id])

//   delivery Delivery?

//   @@map("cart")
// }

// model Delivery {
//   cartId  String  @id @unique @default(cuid()) @map("cart_id")
//   courier String  @db.VarChar(100)
//   price   Decimal @db.Decimal(12, 2)
//   resi    String? @db.VarChar(100)

//   cart Cart @relation(fields: [cartId], references: [transactionCode])
// }

model User {
  id           String        @id @default(cuid())
  firstName    String        @map("first_name") @db.VarChar(100)
  lastName     String?       @map("last_name") @db.VarChar(100)
  phone        Int?          @unique @db.Int
  email        String        @unique @db.VarChar(100)
  role         ROLE          @default(MEMBER)
  addresses    Address[]
  // cart         Cart[]
  account      Account?
  emailVerify  EmailVerify?
  refreshToken RefreshToken?

  @@map("users")
}

model Account {
  email     String        @unique @db.VarChar(100)
  username  String?       @unique @db.VarChar(100)
  password  String?       @db.VarChar(100)
  ipAddress String        @map("ip_address") @db.VarChar(100)
  userAgent String        @map("user_agent") @db.Text
  googleId  String?       @unique @map("google_id") @db.VarChar(100)
  status    ACCOUNTSTATUS @default(PENDING)
  user      User          @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("accounts")
}

model RefreshToken {
  email     String   @unique
  token     String   @db.Text
  expiredAt DateTime @default(dbgenerated("(CURRENT_TIMESTAMP + INTERVAL 1 DAY)")) @map("expired_at") @db.Timestamp(0)
  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at") @db.Timestamp(0)

  users User @relation(references: [email], fields: [email])

  @@map("refresh_token")
}

model EmailVerify {
  email     String     @unique @db.VarChar(100)
  token     String     @default(uuid()) @db.VarChar(100)
  type      TYPEVERIFY @default(REGISTER)
  expiredAt DateTime   @default(dbgenerated("(CURRENT_TIMESTAMP + INTERVAL 5 MINUTE)")) @map("expired_at") @db.Timestamp(0)
  createdAt DateTime   @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at") @db.Timestamp(0)
  user      User       @relation(fields: [email], references: [email], onDelete: Cascade)
}

model Address {
  id         Int     @id @default(autoincrement())
  userId     String  @db.VarChar(100)
  name       String  @db.VarChar(100)
  street     String  @db.VarChar(100)
  city       String  @db.VarChar(100)
  province   String  @db.VarChar(100)
  country    String  @db.VarChar(100)
  postalCode Int     @map("postal_code") @db.Int
  building   String? @db.VarChar(100)

  user User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Company {
  code        String  @id @default("titaniumPrinting")
  name        String  @db.VarChar(100)
  logo        String  @db.VarChar(100)
  description String? @db.Text

  street     String @db.VarChar(100)
  city       String @db.VarChar(100)
  province   String @db.VarChar(100)
  country    String @db.VarChar(100)
  postalCode String    @map("postal_code") @db.VarChar(10)
  socialMedia SocialMedia[]

  @@map("companies")
}

model SocialMedia { 
  id Int @id @default(autoincrement())
  code String
  name String @db.VarChar(100)
  url String @db.VarChar(100)

  company Company @relation(fields: [code], references: [code], onDelete: Cascade)
  @@map("social_media")
}

model Promotion {
  code        String   @id @unique @default("PROMOTION") @db.VarChar(100)
  price       Int?     @db.Int
  percent     Float?   @db.Float
  banner      String?  @db.VarChar(100)
  description String?  @db.Text
  start       DateTime @db.Timestamp(0)
  end         DateTime @db.Timestamp(0)

  @@map("promotions")
}

model Token {
  id           Int      @id @default(autoincrement())
  refreshToken String @db.Text
  accessToken  String @db.Text
  updatedAt    DateTime @updatedAt

  @@map("token")
}

enum ACCOUNTSTATUS {
  PENDING
  ACTIVED
  BANNED
  FAVOURITE
}

enum TYPEVERIFY {
  REGISTER
  CHANGEPASSWORD
}

enum FLAG {
  ACTIVED
  FAVOURITE
  DISABLED
}

enum TYPECOMPONENT {
  MATERIAL
  ADDON
  FINISHING
  PROCESSING
  CONSUMING
}

enum CATEGORY {
  PRODUCT
  SERVICE
}

enum STATUS_ORDER {
  PENDING
  PAYMENT
  PROCESSING
  DELIVERY
  FINISH
  RETURN
}

enum ROLE {
  DEVELOPER
  OWNER
  ADMIN
  MEMBER
}
