
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  slug String? @db.VarChar(120) @unique
  description String? @db.Text
  flag FLAG @default(ACTIVED)
  
  products Product[]
  @@map("categories")
}

model Product {
  barcode String @id @db.VarChar(100) @default(cuid())
  categoryId Int @db.Int @map("category_id")
  name String @db.VarChar(150)
  slug String? @db.VarChar(200) @unique
  image String? @db.VarChar(255)
  description String? @db.Text
  flag FLAG @default(ACTIVED)
  createdAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  updatedAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @map("updated_at")

  category Category @relation(fields: [categoryId], references: [id])
  product_detail ProductDetail[]

  @@index(map: "idx_name_barcode", fields: [name, barcode])
  @@fulltext(map: "idx_name_description", fields: [name, description])
  @@map("products")
}

model ProductDetail {
  barcode String
  componentId String @db.VarChar(255) @map("component_id")
  minQty Int @db.Int @default(1) @map("min_quantity")
  totalQtyPieces Int @db.Int @map("total_quantity_pieces")
  totalPrice Decimal @db.Decimal(12,2) @default(0) @map("total_price")
  totalCogs Decimal @db.Decimal(12, 2) @default(0) @map("total_cost_of_goods_sold")
  

  products Product @relation(fields: [barcode], references: [barcode])
  component Component @relation(fields: [componentId], references: [id])

  @@id([barcode, componentId])
  @@map("product_detail")
}

model Component {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  image String? @db.VarChar(100)
  typePieces String? @db.VarChar(100) @map("type_pieces")
  qtyPieces Int @db.Int @map("quantity_pieces")
  price Decimal? @db.Decimal(12,2) 
  cogs Decimal? @db.Decimal(12,2) @map("cost_of_goods_sold")
  flag FLAG @default(ACTIVED)
  typeComponent TYPECOMPONENT? @map("type_component")
  canIncrase Boolean @default(false) @map("can_incrase")
  createdAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP")) @map("created_at")
  updatedAt DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"))

  productDetail ProductDetail[]
  qualities Quality[]
  @@map("components")
}

model Quality {
  id Int @id @default(autoincrement())
  componentId String @db.VarChar(255)
  name String @db.VarChar(100)
  image String? @db.VarChar(100)
  orientation Boolean @default(false)
  flag FLAG @default(ACTIVED)

  component Component @relation(fields: [componentId], references: [id])
  sizes Size[]
  @@map("qualities")
}

model Size {
  id Int @id @default(autoincrement())
  qualityId Int @db.Int
  width Float? @db.Double
  height Float? @db.Double
  weight Float? @db.Float
  price Decimal? @db.Decimal(12,2) 
  cogs Decimal? @db.Decimal(12,2) @map("cost_of_goods_sold")
  image String? @db.VarChar(100)

  quality Quality @relation(fields: [qualityId], references: [id])
  @@map("sizes")
}


enum FLAG {
  ACTIVED
  FAVOURITE
  DISABLED
  DELETED
}

enum TYPECOMPONENT {
  MATERIAL
  ADDON
  FINISHING
  PROCESSING
  CONSUMING
}
